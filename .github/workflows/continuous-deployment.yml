name: Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Setup Environment
  setup:
    name: Setup Environment Variables
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Deployment Variables
        if: github.ref == 'refs/heads/main'
        run: |
          echo "IMAGE=bikego-main" >> $GITHUB_ENV
          echo "HOST=${{ secrets.HOST }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_SCHEMA_NAME=${{ secrets.DB_SCHEMA_NAME }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "IMGUR_CLIENT_ID=${{ secrets.IMGUR_CLIENT_ID }}" >> $GITHUB_ENV
          echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> $GITHUB_ENV
          echo "SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}" >> $GITHUB_ENV

  # Job 2: Build and Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the short SHA hash of the commit
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t bikego/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} .

      - name: Push Docker Image
        run: |
          docker push bikego/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}

  # Job 3: Setup VPN Connection
  vpn_setup:
    name: Establish VPN Connection
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install OpenVPN
        run: sudo apt-get update && sudo apt-get install openvpn -y

      - name: Configure and Connect to OpenVPN
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" > ~/openvpn-config.ovpn
          echo "${{ secrets.OPENVPN_PASSWORD }}" > ~/vpn-auth.txt
          sudo openvpn --config ~/openvpn-config.ovpn --auth-user-pass ~/vpn-auth.txt --daemon

      - name: Ensure VPN Connection
        run: |
          for i in {1..10}; do
            if pgrep -x "openvpn" > /dev/null; then break; fi
            echo "Waiting for VPN connection..." && sleep 3
          done

  # Job 4: Deploy Application to Server
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: vpn_setup

    steps:
      - name: SSH Deploy and Run Docker Container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login || true
            docker pull bikego/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}
            docker stop ${{ env.IMAGE }} || true
            docker rm ${{ env.IMAGE }} || true
            docker run -d --name ${{ env.IMAGE }} \
              -e HOST="${{ env.HOST }}" \
              -e PORT="${{ env.PORT }}" \
              -e FLASK_ENV="${{ env.FLASK_ENV }}" \
              -e DB_USER="${{ env.DB_USER }}" \
              -e DB_PASSWORD="${{ env.DB_PASSWORD }}" \
              -e DB_HOST="${{ env.DB_HOST }}" \
              -e DB_PORT="${{ env.DB_PORT }}" \
              -e DB_NAME="${{ env.DB_NAME }}" \
              -e DB_SCHEMA_NAME="${{ env.DB_SCHEMA_NAME }}" \
              -e JWT_SECRET_KEY="${{ env.JWT_SECRET_KEY }}" \
              -e IMGUR_CLIENT_ID="${{ env.IMGUR_CLIENT_ID }}" \
              -e SENDER_EMAIL="${{ env.SENDER_EMAIL }}" \
              -e SENDER_PASSWORD="${{ env.SENDER_PASSWORD }}" \
              -p ${{ secrets.DEFAULT_PORT }}:${{ secrets.DEFAULT_PORT }} \
              bikego/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}
            docker update --restart unless-stopped ${{ env.IMAGE }}

  # Job 5: Cleanup Resources
  cleanup:
    name: Cleanup VPN and Temporary Files
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Terminate OpenVPN Connection
        run: sudo pkill -f openvpn || true

      - name: Remove Temporary Files
        run: rm -rf ~/openvpn-config.ovpn ~/vpn-auth.txt ~/.ssh