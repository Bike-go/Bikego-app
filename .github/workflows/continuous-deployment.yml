name: Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run_pull:
    name: Run Pull and Deploy
    runs-on: ubuntu-24.04

    steps:
      - name: Checking out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the short SHA hash of the commit
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
  
      - name: Build and push Docker image
        run: |
          docker build -t selecro/bikego-main:${{ github.ref_name }}-${{ env.SHORT_SHA }} .
          docker push selecro/bikego-main:${{ github.ref_name }}-${{ env.SHORT_SHA }}

      - name: Install OpenVPN
        run: |
          sudo apt-get update && sudo apt-get install openvpn -y
      - name: Configure OpenVPN
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" > ~/openvpn-config.ovpn
          echo "${{ secrets.OPENVPN_PASSWORD }}" > ~/openvpn.txt
      - name: Connect to OpenVPN
        run: |
          sudo nohup openvpn --config ~/openvpn-config.ovpn --auth-nocache --askpass ~/openvpn.txt > /dev/null 2>&1 &
      - name: Wait for VPN Connection
        run: |
          while ! pgrep -x "openvpn" > /dev/null; do sleep 1; done

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Upload files to server via SFTP
        uses: Dylan700/sftp-upload-action@v1.2.3
        with:
          server: ${{ secrets.SERVER_IP }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          uploads: |
            ./ => ~/bikego

      - name: Create .env file on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:{{ secrets.SSH_PORT }} << 'EOF'
            set -e
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> ~/bikego/.env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> ~/bikego/.env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> ~/bikego/.env
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> ~/bikego/.env
            echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> ~/bikego/.env
            echo "POSTGRES_SCHEMA=${{ secrets.POSTGRES_SCHEMA }}" >> ~/bikego/.env
            echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> ~/bikego/.env
            echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> ~/bikego/.env
            echo "FLASK_APP=${{ secrets.FLASK_APP }}" >> ~/bikego/.env
            echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> ~/bikego/.env
            echo "FLASK_HOST=${{ secrets.FLASK_HOST }}" >> ~/bikego/.env
            echo "FLASK_PORT=${{ secrets.FLASK_PORT }}" >> ~/bikego/.env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> ~/bikego/.env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> ~/bikego/.env
            echo "IMGUR_CLIENT_ID=${{ secrets.IMGUR_CLIENT_ID }}" >> ~/bikego/.env
            echo "IMGUR_CLIENT_SECRET=${{ secrets.IMGUR_CLIENT_SECRET }}" >> ~/bikego/.env
            echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> ~/bikego/.env
            echo "SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}" >> ~/bikego/.env
            echo "URL_IN_EMAIL=${{ secrets.URL_IN_EMAIL }}" >> ~/bikego/.env
          EOF
  
      - name: SSH into server and deploy
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}}:{{ secrets.SSH_PORT }} << 'EOF'
            set -e
            cd ~/bikego
            docker-compose down
            docker-compose up -d --build
          EOF

      - name: Terminate OpenVPN Connection
        run: sudo pkill -f openvpn || true

      - name: Remove Temporary Files
        run: rm -rf ~/openvpn-config.ovpn ~/vpn-auth.txt ~/.ssh
