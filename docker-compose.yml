version: '3.9'

services:
  db:
    container_name: bikego_postgres
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      retries: 5
      timeout: 10s

  pgadmin:
    container_name: bikego_pgadmin4
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
    - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 30s
      retries: 5
      timeout: 10s

  flask_app:
    build: .
    container_name: bikego
    image: bikego
    restart: unless-stopped
    env_file:
      - .env
    environment:
      FLASK_APP: ${FLASK_APP}
      FLASK_ENV: ${FLASK_ENV}
      FLASK_HOST: ${FLASK_HOST}
      FLASK_PORT: ${FLASK_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_SCHEMA: ${POSTGRES_SCHEMA}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      IMGUR_CLIENT_ID: ${IMGUR_CLIENT_ID}
      IMGUR_CLIENT_SECRET: ${IMGUR_CLIENT_SECRET}
      SENDER_EMAIL: ${SENDER_EMAIL}
      SENDER_PASSWORD: ${SENDER_PASSWORD}
    ports:
      - "${FLASK_PORT}:5000"
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      retries: 5
      timeout: 10s

volumes:
  postgres_data:
  pgadmin_data:

networks:
  default:
    driver: bridge
